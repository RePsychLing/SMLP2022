---
title: "Pan et al. (2013). "
subtitle: "RePsychLing in SMLP2022"
author: "Reinhold Kliegl"
date: "2022-09-12"
format: 
  html:
    embed-resources: true
    toc: true
    toc-depth: 2
    code-fold: false
    number-sections: true
    fig-width: 8
    fig-height: 6
    fig-format: svg
editor_options: 
jupyter: julia-1.8
---

# Background

Predicting psychometric digit-RAN and dice-RAN with gaze duration and 
eye-voice span (EVS) from computerized assessment of digit-RAN and dice-RAN 
in Chinese control and dyslexic children. 

Source: Pan et al. (2013). 
and ï¿¼dice in Chinese normal and dyslexic children. Developmental Science. 

# Packages

```{julia}
#| label: packages

using AlgebraOfGraphics
using Arrow
using CairoMakie       # graphics back-end
using CategoricalArrays
using Chain
using DataFrames
using DataFrameMacros  # simplified dplyr-like data wrangling
using MixedModels
using MixedModelsMakie # diagnostic plots
using ProgressMeter
using Random           # random number generators
using RCall            # call R from Julia
using StatsModels

using AlgebraOfGraphics: boxplot
using AlgebraOfGraphics: density

using MixedModelsMakie: qqnorm
using MixedModelsMakie: ridgeplot
using MixedModelsMakie: scatter
using MixedModelsMakie: caterpillar

ProgressMeter.ijulia_behavior(:clear);
CairoMakie.activate!(; type="svg");
```

+ The data are available as an arrow file.
+ Most of preprocessing was done with R in RStudio.

# Preprocessing

```{julia}
dat = DataFrame(Arrow.Table("./data/Pan_RAN.arrow"))
describe(dat)
contrasts =
       Dict(:Group => EffectsCoding(),
            :Condition => EffectsCoding(),
            :Subj => Grouping());
```

# Lineare mixed model

using RegressionFormulae
 1 + Condition*Group*evs_c*gaze_c - Condition:Group:evs_c:gaze_c -
	                        Group:evs_c:gaze_c - Condition:gaze_c:evs_c +
```{julia}
#| label: m0
m0 = let
    form = @formula(lran ~ 1 + (Condition+Group+evs_c+gaze_c)^2 +
                          Group&Condition&evs_c + Group&Condition&gaze_c +
                          (1|Subj));
    fit(MixedModel, form, dat; contrasts);
  end
```

```{julia}
using Remef
coefnames(m0)
cn = coefnames(m0)
dat.CGe = partial_fitted(m0, vcat(cn[8], cn[10:11], cn[13]), Dict(:Subj => String[])) # no random effects
describe(dat.CGe) 
```


