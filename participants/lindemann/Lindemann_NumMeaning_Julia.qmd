---
title: "Oliver Lindemann: Two attributes of numerical meaning"
subtitle: "RePsychLing in SMLP2022"
author: "Reinhold Kliegl"
date: "2022-08-31"
format:
  html:
    embed-resources: true
    toc: true
    toc-depth: 2
    code-fold: false
    number-sections: true
    fig-width: 8
    fig-height: 6
editor_options:
  chunk_output_type: console
jupyter: julia-1.8
execute-dir: file
---

# Description

The study aims to examine the interactions of space- and size-congruity effects while number processing.

The numbers 1 to 9 ($N$) were presented in different six font sizes ($V_\text{size}=[-3, -2, -1, 1, 2, 3]$) and at six different stimulus locations (three left and three right from screen center, $V_\text{space}=[-3, -2, -1, 1, 2, 3]$). For each trial, a size and space-congruity parameter, $C$, could be calculated that varies between $-1$ and $+1$ (see formula below).

The mixed effect model of the reaction times aims to consider, beside these two congruity parameters and their interaction, also the size- or space-congruity in the previous trial ($n-1$, 'Gratton effect').

Congruity was defined as $$C =  \frac{V}{3}  \cdot \frac{N-5}{4} = \frac{V(N-5)}{12}$$


# Setup

## Packages

```{julia}
#| label: packages

using AlgebraOfGraphics
using Arrow
using CairoMakie       # graphics back-end
using CategoricalArrays
using Chain
using DataFrames
using DataFrameMacros  # simplified dplyr-like data wrangling
using MixedModels
using MixedModelsMakie # diagnostic plots
using ProgressMeter
using Random           # random number generators
using RCall            # call R from Julia
using StatsBase
using StatsModels

ProgressMeter.ijulia_behavior(:clear);
CairoMakie.activate!(; type="svg");
```

## Code book

For preprocessing see earlier script. Here we have only the relevant variables for the following analyses.

-   **`Subj`**: Subject ID
-   **`digit`**: Presented digit (1 to 9, except 5)
-   **`size`**: Stimulus size
-   **`size_rc`**: Stimulus size (-3 to +3) (recalculated)
-   **`pos`**: Stimulus position
-   **`pos_rc`**: Stimulus position (-3 to +3) (recalculated)
-   **`numerical_distance`**: Distance to 5 (abs(5-digit))
-   **`SiC`**: Size congruity parameter (-1 to +1)
-   **`SpC`**: Spatial congruity parameter (-1 to +1)
-   **`P_SiC`**: Size congruity of the previous trial (-1 to +1)
-   **`P_SpC`**: Spatial congruity of the previous trial (-1 to +1)
-   **`speed`**: Speed of responding in Hz, [1/s]


```{julia}
#| label: data

dat = DataFrame(Arrow.Table("./data/Lindemann_NumMeaning.arrow"));
describe(dat)
```

# Contrasts

We have only the random factor `Subj` and declare it as a grouping variable.

```{julia}
contrasts = Dict(:Subj => Grouping());
```

# Model selection

## Complex LMM

 We start with a complex LMM; it is not _maximal_ because no interaction terms in RES.

```{julia}
#| label: m_cpx
m_cpx = let
    form = @formula(speed ~ 1 + numerical_distance + size_rc + pos_rc +
                                SiC+SpC+P_SiC+P_SpC + SiC&SpC + SiC&P_SiC + SiC&P_SpC + SpC&P_SiC + SpC&P_SpC +
                           (1 + numerical_distance + size_rc + pos_rc + SiC + SpC + P_SiC + P_SpC | Subj));
    fit(MixedModel, form, dat; contrasts);
  end
issingular(m_cpx)  # overparameterized
VarCorr(m_cpx)
```

This model is overparameterized.

## Very simple LMM

```{julia}
#| label: m_voi

m_voi = let
    form = @formula(speed ~ 1 + numerical_distance + size_rc + pos_rc +
                                SiC+SpC+P_SiC+P_SpC + SiC&SpC + SiC&P_SiC + SiC&P_SpC + SpC&P_SiC + SpC&P_SpC +
                           (1 | Subj));
    fit(MixedModel, form, dat; contrasts);
  end
lrtest(m_voi, m_cpx)
```

## Zero-correlation parameter LMM

```{julia}
#| label: m_zcp

m_zcp = let
    form = @formula(speed ~ 1 + numerical_distance + size_rc + pos_rc +
                                SiC+SpC+P_SiC+P_SpC + SiC&SpC + SiC&P_SiC + SiC&P_SpC + SpC&P_SiC + SpC&P_SpC +
                   zerocorr(1 + numerical_distance + size_rc + pos_rc + SiC + SpC + P_SiC + P_SpC | Subj));
    fit(MixedModel, form, dat; contrasts);
  end
issingular(m_zcp)  # overparameterized
VarCorr(m_zcp)

lrtest(m_voi, m_zcp, m_cpx)
```

```{julia}
let mods = [m_voi, m_zcp, m_cpx];
 DataFrame(;
    model=[:m_voi, :m_zcp, :m_cpx],
    pars=dof.(mods),
    geomdof=round.(Int, (sum âˆ˜ leverage).(mods)),
    AIC=round.(Int, aic.(mods)),
    AICc=round.(Int, aicc.(mods)),
    BIC=round.(Int, bic.(mods)),
  )
end
```

We do no loose goodness of fit with LMM `m_zcp` relative to LMM `m_cpx`; both AIC and BIC increase with model complexity. However, there are reliable individual differences in some of the VCs if we go by AIC relative to LMM `m_voi`.

LMM `m_zcp` is still overparameterized. There are quite a few very small VCs.

# Parsimonious LMMs

We remove small variance components (VCs)

```{julia}
#| label: m_prsm1

m_prsm = let
    form = @formula(speed ~ 1 + numerical_distance + size_rc + pos_rc +
                                SiC+SpC+P_SiC+P_SpC + SiC&SpC + SiC&P_SiC + SiC&P_SpC + SpC&P_SiC + SpC&P_SpC +
                   zerocorr(1 + numerical_distance + size_rc + SpC + P_SpC | Subj));
    fit(MixedModel, form, dat; contrasts);
  end
issingular(m_prsm)  # ok
VarCorr(m_prsm)

lrtest(m_voi, m_prsm,  m_zcp)
```

# Figures

## Caterpillar plot

```{julia}
#| fig-cap1: Prediction intervals on subject random effects for model prsm
#| label: fig-cm_prsm1
#|
cm_prsm = first(ranefinfo(m_prsm))
caterpillar!(Figure(; resolution=(800, 1200)), cm_prsm; orderby=2)
```

Some individual differences in the numerical-distance effect.

```{julia}
#| label: fig-cm_prsm2
#|
cm_prsm = first(ranefinfo(m_prsm))
caterpillar!(Figure(; resolution=(800, 1200)), cm_prsm; orderby=3)
```

Some individual differences in the size effect.

No evidence for individual differences in the other two VCs. Do we need them in the LMM?

```{julia}
#| label: m_prsm2

m_prsm2 = let
    form = @formula(speed ~ 1 + numerical_distance + size_rc + pos_rc +
                                SiC+SpC+P_SiC+P_SpC + SiC&SpC + SiC&P_SiC + SiC&P_SpC + SpC&P_SiC + SpC&P_SpC +
                   zerocorr(1 + numerical_distance + size_rc  | Subj));
    fit(MixedModel, form, dat; contrasts);
  end
issingular(m_prsm2)  # ok
VarCorr(m_prsm2)

lrtest(m_voi, m_prsm2,  m_prsm)
```

No, not really.

## Shrinkage plots

```{julia}
#| code-fold: true
#| label: fig-shrinkage
#|
#| fig-cap: Shrinkage plots of the subject random effects in model m_prsm2
shrinkageplot!(Figure(; resolution=(1000, 1200)), m_prsm2)
```

# Appendix
```{julia}
versioninfo()
```
