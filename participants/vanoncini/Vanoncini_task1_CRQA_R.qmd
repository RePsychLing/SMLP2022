---
title: "Cardiac Synchrony and its Role in Language Development"
author: "Monica Vanoncini"
date: "2022-08-25 (last revised: `r format(Sys.time())`)"
format: 
  html:
    toc: true
    toc-depth: 2
    code-fold: false
    number-sections: true
    fig-width: 8
    fig-height: 6
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


# Task 1: Cardiac synchrony

**MV**: This is part of my PhD project which examines the role of mother-infant interpersonal synchrony on language development. Specifically, in this script, I test the following RQ. Does mother-infant cardiac synchrony predict infants' word segmentation ability? We include data of 29 dyads who performed two different tasks: 

* **word-segmentation task**: infants underwent an eye-tracking task. During the familiarization phase they were listening to a story containing target words (i.e., familiar words). Then, they were tested with familiar (6 trials) and novel (6 trials) words. We measured their looking time (LT) in msec while listening to novel vs. familiar words. LT was our dependent variable.

* **5-minutes free play interaction**: mothers were asked to play with the baby as they would do at home. During this time we recorded dual ECG. We then followed the following processing steps: 
1. we extracted offline Interbeat-intervals (IBIs) 
2. we calculated Respiratory Sinus Arrhythmia (RSA) 
3. to collect a more continuous measure of RSA, a sliding window of 15 s was used to extract a continuous estimate of cardiac vagal tone for both participants 
4. to identify coupling/synchrony between mothers' and infants' RSA time-series we used cross-recurrence quantification analysis (CRQA) 
5. CRQA gave us a bunch of metrics: RR, det, NRLINE, maxline, entropy, lam, TT 
6. we ran principal component analysis and we decide to include the first two components (pc1 and pc2), which had eigenvalues higher than 1 (Kaiser Rule).

# Part 1: Data preparation

```{r} 
library(readxl) 
lang_ECG <- read.csv("./data/Vanconin_lang_ECG.csv", header=TRUE, sep=";", dec = ",") 
str(lang_ECG)
lang_ECG$Participant <- as.factor(lang_ECG$Participant)
lang_ECG$Phase <- as.factor(lang_ECG$Phase)
lang_ECG$Familiarity <- as.factor(lang_ECG$Familiarity)
str(lang_ECG)
```

```{r}
#select only the data of the test phase
lang_ECG <- subset(lang_ECG, lang_ECG$Phase !="familiarization")

summary(lang_ECG)
#set contrasts
library(stats)
levels(droplevels(lang_ECG$Familiarity))
contrasts(lang_ECG$Familiarity)
```

# Write arrow file

RK: The arrow file is used as input in Julia. 

```{r}
library(arrow)
library(tidyverse)
library(summarytools)

#view(dfSummary(lang_ECG))

dat <- 
  lang_ECG |> 
  select(-Phase) |> 
  rename(Subj=Participant, Fam=Familiarity, lt=LT, pc1=PC1, pc2=PC2, pc3=PC3) |> 
  mutate(Subj = factor(paste0("S", str_pad(Subj, width = 2, side = "left", pad = "0")))) |> 
  droplevels() |> 
  relocate(lt, .after=pc3) |> 
  as_tibble()

#view(dfSummary(dat))

write_feather(dat, "./data/Vanoncini_lang_ECG.arrow")
```


# Linear mixed models 

```{r}
#center predictors
lang_ECG$pc1C <- lang_ECG$PC1 - mean(lang_ECG$PC1)
lang_ECG$pc2C <- lang_ECG$PC2 - mean(lang_ECG$PC2)
lang_ECG$pc3C <- lang_ECG$PC3 - mean(lang_ECG$PC3)
```


```{r}
library(lme4)
library(lmerTest)
options(scipen = 999)
lang_ECG$Familiarity <- relevel(lang_ECG$Familiarity, ref = "familiar")
```

```{r}
#run different models
pc0 <- lmer(log(LT)~Familiarity+(1|Participant), 
            data=lang_ECG, REML=FALSE, control=lmerControl(calc.derivs = FALSE))

pc1 <- lmer(log(LT)~Familiarity*pc1C+(1|Participant),
            data=lang_ECG, REML=FALSE, control=lmerControl(calc.derivs = FALSE))

pc2 <- lmer(log(LT)~Familiarity*pc1C+Familiarity*pc2C+(1|Participant),
            data=lang_ECG, REML=FALSE, control=lmerControl(calc.derivs = FALSE))

#compare models with anova()
anova(pc0,pc1,pc2)
summary(pc2)
```

# Plot results

```{r fig.width=8, fig.height=12}
library(performance)
library(ggplot2)
check_model(pc2)
library(effects)

myef <- effect("Familiarity*pc2C", pc2)
myef_df <- data.frame(myef)
head(myef_df)
```

```{r}
ggplot(myef_df,aes(x=pc2C, y=fit, linetype=Familiarity, fill=Familiarity, size=Familiarity)) +
  geom_path(data=myef_df, aes(x=pc2C, y=fit), size=1.5) + # for plotting the lines
  geom_ribbon(data=myef_df, aes(x=pc2C, ymin=lower, ymax=upper, group=Familiarity), alpha=.3) +
  geom_point(data=lang_ECG, aes(x=pc2C, y=log(LT), shape=Familiarity, colour=Participant), size=1.5) +
  #scale_y_continuous(trans='logit') + # y-scale is now reflecting the logit space
  #theme_bw() 
  #xlab("pc2 centered") + ylab("LT (fit)") +
  labs(x = "pc2 (centered)", y = "Log LT for test trials") +
  scale_fill_manual(values=c("black","black"))+
  guides(shape = guide_legend(title = "Trial type"), colour=FALSE, fill=FALSE, size=FALSE) +
  labs(linetype="Group")+
  theme(axis.title = element_text(size = 15), axis.text = element_text(size = 12), 
        legend.text = element_text(size = 10), legend.title = element_text(size = 10))
```

# Appendix

```{r}
sessionInfo()
```

